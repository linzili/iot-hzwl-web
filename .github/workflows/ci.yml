name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Node.js modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install

      - name: Build the project
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
  buildImage:
    permissions:
      packages: write
      contents: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }} -f Dockerfile .
          docker push ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }}

  deployImage:
    runs-on: ubuntu-latest
    needs: buildImage
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }}
            # if [ \$(docker ps -q -f name=${{ github.repository }}) ]; then docker rm -f ${{ github.repository }}; fi
            if [ $(docker ps -q -f name=$REPO_NAME) ]; then docker rm -f $REPO_NAME; fi
            docker run -d -p 48080:80 --name $REPO_NAME ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }}
